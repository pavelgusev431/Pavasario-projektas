import { createContext, useEffect, useState } from "react";
import axios from "axios";
import Cookies from "js-cookie";

const AuthContext = createContext(null);

const AuthContextProvider = ({ children }) => {
    const [user, setUser] = useState(null);  // ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é NULL
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchUserData = async () => {
            // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∞—Ö –∏ localStorage
            let token = Cookies.get("authToken") || localStorage.getItem("authToken");
        
            if (!token) {
                console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—É–∫–∞—Ö –∏ localStorage, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.");
                setLoading(false);
                return;  // ‚úÖ –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
            }
        
            console.log("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:", token);
        
            try {
                const response = await axios.get("http://localhost:3000/auth/me", {
                    withCredentials: true,
                    credentials: "include",
                    headers: { Authorization: `Bearer ${token}` },
                });
        
                console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);
                setUser(response.data.data);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.response?.data || error.message);
                
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 (Unauthorized) - –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
                if (error.response?.status === 401) {
                    console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â.");
                    Cookies.remove("authToken");
                    localStorage.removeItem("authToken");
                    setUser(null);
                }
            } finally {
                setLoading(false);
            }
        };
        
        fetchUserData();
    }, []);        

    return (
        <AuthContext.Provider value={{ user, setUser, loading }}>
            {loading ? <div className="text-center py-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div> : children}
        </AuthContext.Provider>
    );
};

export { AuthContext, AuthContextProvider };
