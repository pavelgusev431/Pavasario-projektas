import { useForm } from 'react-hook-form';
import { useContext, useState } from 'react';
import axios from 'axios';
import { AuthContext } from '../../contexts/AuthContext.jsx';
import ToggleAuthType from '../buttons/ToggleAuthType.jsx';
import { useLocation, useNavigate } from 'react-router';
import sha1 from 'js-sha1';
import sha256 from 'js-sha256';
import Cookies from 'js-cookie';

const Auth = () => {
    const navigate = useNavigate();
    const location = useLocation();
    let from = location.state?.from?.pathname || '/home';
    if (from === '/logout') from = '/home';

    const { register, handleSubmit, formState: { errors }, setValue } = useForm();
    const { setUser } = useContext(AuthContext);
    const [authType, setAuthType] = useState('signup');
    const [error, setError] = useState('');

    // üî• –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ª–∏
    const getSalt = async (username) => {
        try {
            const response = await axios.get(`http://localhost:3000/users/getSalt/${username}`);
            return response.data.salt;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ª–∏:", error.response?.data?.message || error.message);
            throw new Error(error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ª–∏");
        }
    };

    // üî• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    const registerUser = async (user) => {
        try {
            const response = await axios.post("http://localhost:3000/users/signup", user, {
                withCredentials: true,
            });

            console.log("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", response.data.token);

            localStorage.setItem("authToken", response.data.token);
            Cookies.set("authToken", response.data.token, { path: "/", secure: true });

            return response.data;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.response?.data?.message || error.message);
            throw new Error(error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    };

    // üî• –í—Ö–æ–¥
    const loginUser = async (data) => {
        try {
            const salt = await getSalt(data.username);
            const hashedPassword = sha256(sha1(data.password + salt));

            const response = await axios.post("http://localhost:3000/users/login", {
                username: data.username,
                password: hashedPassword,
            }, {
                withCredentials: true,
            });

            console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:", response.data.token);

            localStorage.setItem("authToken", response.data.token);
            Cookies.set("authToken", response.data.token, { path: "/", secure: true });

            return response.data;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error.response?.data?.message || error.message);
            throw new Error(error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É");
        }
    };

    // üî• –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    const onSubmit = async (data) => {
        try {
            let response;
            if (authType === "signup") {
                response = await registerUser(data);
            } else {
                response = await loginUser(data);
            }

            if (response?.status === "success") {
                alert(authType === "signup" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" : "–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É");

                setUser(response.data);
                setValue("username", "");
                setValue("email", "");
                setValue("password", "");
                setError("");

                navigate("/home");
            } else {
                throw new Error(response?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
            }
        } catch (err) {
            setError(err.message);
        }
    };

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100">
            <div className="w-full max-w-md p-8 bg-white shadow-lg rounded-lg">
                <h2 className="text-2xl font-semibold text-center text-gray-800">
                    {authType === 'login' ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
                </h2>

                <form onSubmit={handleSubmit(onSubmit)} className="mt-6">
                    <div className="mb-4">
                        <input
                            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                            type="text"
                            placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            {...register('username', { required: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" })}
                        />
                        {errors.username && <p className="text-red-500 text-sm mt-1">{errors.username.message}</p>}
                    </div>

                    {authType === 'signup' && (
                        <div className="mb-4">
                            <input
                                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                                type="email"
                                placeholder="Email"
                                {...register('email', { required: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" })}
                            />
                            {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>}
                        </div>
                    )}

                    <div className="mb-4">
                        <input
                            className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                            type="password"
                            placeholder="–ü–∞—Ä–æ–ª—å"
                            {...register('password', { required: "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" })}
                        />
                        {errors.password && <p className="text-red-500 text-sm mt-1">{errors.password.message}</p>}
                    </div>

                    <button
                        type="submit"
                        className="w-full px-4 py-2 text-white bg-blue-500 rounded-lg hover:bg-blue-600 transition duration-300"
                    >
                        {authType === 'login' ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
                    </button>

                    {error && <p className="text-red-500 text-sm mt-2 text-center">{error}</p>}
                </form>

                <div className="mt-4 text-center">
                    <ToggleAuthType authType={authType} setAuthType={setAuthType} />
                </div>
            </div>
        </div>
    );
};

export default Auth;
