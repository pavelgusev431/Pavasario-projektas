import { User } from '../models/userModel.js';
import jsonwebtoken from 'jsonwebtoken';
import AppError from '../utilities/AppError.js';
import sha1 from 'js-sha1';
import sha256 from 'js-sha256';
import dotenv from 'dotenv';
import path from 'path';
import bcrypt from 'bcryptjs';
import UserSecret from "../models/userSecretModel.js";



dotenv.config();

const ADMIN_USER = process.env.ADMIN_USER;
const ADMIN_PASS = process.env.ADMIN_PASS;
const ADMIN_HASH = sha256(sha1(sha256(sha1(ADMIN_PASS)) + 'salt'));
const ADMIN_EMAIL = process.env.ADMIN_EMAIL;

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const createAdmin = async () => {
    try {
        const admin = await User.create({
            username: ADMIN_USER,
            email: ADMIN_EMAIL,
        });

        console.log(`\x1b[34mUser \x1b[31m"${ADMIN_USER}"\x1b[34m created successfully\x1b[0m`);

        console.log(`üîê –•–µ—à –ø–∞—Ä–æ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${hashedPassword}`);
        console.log(`üßÇ –°–æ–ª—å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${salt}`);


        await UserSecret.create({
            user_id: admin.id,
            password: `${ADMIN_HASH}:salt`,
            role: 'admin',
        });

        console.log(`\x1b[34mUser \x1b[31m"${ADMIN_USER}"\x1b[34m secret created successfully\x1b[0m`);
    } catch (error) {
        throw new AppError(`\x1b[31mError creating admin account:\x1b[0m\n${error}`, 500);
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const createUser = async (req, res) => {
try {
const { username, password, email } = req.body;
    const role = "user";
    const now = new Date();
        const salt = sha256(sha1(now.toString() + username));
        const hashedPassword = password.length === 64 ? password : sha256(sha1(password + salt));


        // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.create({ username, email });

        if (!user || !user.id) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID –Ω–µ –ø–æ–ª—É—á–µ–Ω.");
        }

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.id}`);

        // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–∞—Ä–æ–ª—è –≤ `user_secrets`
        await UserSecret.create({
            user_id: user.id,
            password: `${hashedPassword}:${salt}`,
            role: role,
        });

        console.log(`‚úÖ –ó–∞–ø–∏—Å—å –≤ user_secrets —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = jsonwebtoken.sign(
            { id: user.id, role: role },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        );

        console.log(`‚úÖ –¢–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ **HTTP-ONLY COOKIE**
        res.cookie("token", token, {
            httpOnly: true,
            secure: false,
            sameSite: "Lax",
        });

        res.status(201).json({
            status: "success",
            data: {
                id: user.id,
                username: user.username,
                email: user.email,
            },
            token: token,
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        res.status(500).json({ message: error.message || "Internal server error" });
    }
};

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const login = async (req, res) => {
    const { username, password } = req.body;

    console.log("\x1b[33m[DEBUG] –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\x1b[0m", username);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ where: { username } });
    if (!user) {
        console.log("\x1b[31m[ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\x1b[0m");
        return res.status(401).json({ message: "Invalid username or password" });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–æ–ª—å –≤ `user_secrets`
    const secret = await UserSecret.findOne({ where: { user_id: user.id } });
    if (!secret) {
        console.log("\x1b[31m[ERROR] –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_secrets\x1b[0m");
        return res.status(401).json({ message: "Invalid username or password" });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–ª—å –∏ —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const parts = secret.password.split(':');
    if (parts.length !== 2) {
        console.log("\x1b[31m[ERROR] –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–æ–ª—è –≤ –ë–î\x1b[0m");
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }

    const storedHash = parts[0]; // –•–µ—à –ø–∞—Ä–æ–ª—è –∏–∑ –ë–î
    const salt = parts[1]; // –°–æ–ª—å

    console.log(`‚úÖ –°–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞: ${salt}`);

    console.log(`üîë –í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º: '${password}'`);


    // –•–µ—à–∏—Ä—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Ç–æ–π –∂–µ —Å–æ–ª—å—é
    const hashedPassword = password;

    console.log(`üîê –•–µ—à –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ: ${hashedPassword}`);
    console.log(`üßÇ –°–æ–ª—å –ø—Ä–∏ –≤—Ö–æ–¥–µ: ${salt}`);
    console.log(`üÜö –û–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à –∏–∑ –ë–î: ${storedHash}`);


    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
    if (hashedPassword !== storedHash) {
        console.log("\x1b[31m[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\x1b[0m");
        return res.status(401).json({ message: "Invalid username or password" });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = jsonwebtoken.sign(
        { id: user.id, role: secret.role },
        process.env.JWT_SECRET,
        { expiresIn: '1d' }
    );

    console.log("\x1b[32m[SUCCESS] –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:\x1b[0m", token);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
    res.cookie('token', token, { httpOnly: true, secure: false, sameSite: 'lax', path: '/' });
    
    res.status(200).json({
        status: "success",
        data: { id: user.id, username: user.username, email: user.email },
        token: token,
    });
};

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const logout = async (req, res) => {
    const cookies = req.cookies;
    if (!cookies?.token) return res.sendStatus(203);
    const token = jsonwebtoken.decode(cookies.token);
    const foundUser = await User.findByPk(token.id);
    if (foundUser) {
        res.clearCookie('token', { httpOnly: true });
        return res.sendStatus(204);
    } else {
        throw new AppError('User not found', 404);
    }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const me = async (req, res) => {
    try {
        const token = req.cookies.token || req.headers.authorization?.split(" ")[1];
        if (!token) {
            return res.status(401).json({ message: "Not authenticated" });
        }

        const decoded = jsonwebtoken.verify(token, process.env.JWT_SECRET);
        console.log("–î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω:", decoded);

        const user = await User.findByPk(decoded.id);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        res.status(200).json({
            status: "success",
            data: { id: user.id, username: user.username, email: user.email },
        });
    } catch (error) {
        return res.status(401).json({ message: "Unauthorized", error: error.message });
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
const getUserByUsername = async (req, res) => {
    const { username } = req.params;
    const user = await User.findOne({ where: { username } });
    if (!user) {
        throw new AppError(`User "${username}" not found`, 404);
    }
    user.password = undefined; // —É–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    res.status(200).json({ status: 'success', data: user });
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
const getUserById = async (req, res) => {
    const { id } = req.params;
    const user = await User.findByPk(id);
    if (!user) {
        return res.status(404).json({ message: `User with id ${id} not found` });
    }
    user.password = undefined; // —É–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    res.status(200).json({ status: 'success', data: user });
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const updateUserProfile = async (req, res) => {
    try {
        const { username, email, description, contacts, image_url } = req.body;
        const userId = req.user.id;

        const user = await User.findByPk(userId);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.username = username || user.username;
        user.email = email || user.email;
        user.description = description || user.description;
        user.contacts = contacts || user.contacts;
        user.image_url = image_url || user.image_url;

        await user.save();

        res.status(200).json({
            status: "success",
            data: {
                id: user.id,
                username: user.username,
                email: user.email,
                description: user.description,
                contacts: user.contacts,
                image_url: user.image_url,
            },
        });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const getAllUsers = async (req, res) => {
    const users = await User.findAll();
    res.status(200).json({ status: 'success', data: users });
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getSalt = async (req, res) => {
    try {
    const { username } = req.params;
    console.log(`üîç –ó–∞–ø—Ä–æ—Å —Å–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ where: { username } });
    if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    // –ü–æ–∏—Å–∫ –µ–≥–æ –ø–∞—Ä–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ user_secrets
    const secret = await UserSecret.findOne({ where: { user_id: user.id } });
    if (!secret) {
        return res.status(404).json({ message: "–°–µ–∫—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω." });
        }

     // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–ª–∏
    const salt = secret.password.split(':')[1];

    console.log(`‚úÖ –°–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞: ${salt}`);
    return res.status(200).json({ salt });
    } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–ª–∏:", error.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
    }
};

const updateUserPassword = async (req, res) => {
    try {
        console.log("üì• –î–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", req.body);
        console.log("üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:", req.user?.id);

        const { current, new: newPassword, confirm } = req.body;
        const userId = req.user.id;

        const userSecret = await UserSecret.findOne({ where: { user_id: userId } });

        if (!userSecret || !userSecret.password) {
            return res.status(400).json({ status: "fail", message: "User does not have a password set" });
        }

        console.log("üîê –ü–∞—Ä–æ–ª—å –∏–∑ –ë–î:", userSecret.password);

        // –†–∞–∑–±–∏—Ä–∞–µ–º —Ö—Ä–∞–Ω–∏–º—ã–π –ø–∞—Ä–æ–ª—å
        const parts = userSecret.password.split(":");
        if (parts.length !== 2) {
            return res.status(500).json({ status: "fail", message: "Invalid password format in database" });
        }

        const storedHash = parts[0];  // üîë –°–∞–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
        const salt = parts[1];        // üßÇ –°–æ–ª—å

        console.log("üßÇ –°–æ–ª—å –∏–∑ –ë–î:", salt);
        console.log("üîë –í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:", current);

        // –•–µ—à–∏—Ä—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        const enteredHash = sha256(sha1(current + salt));

        console.log("üîê –•–µ—à –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:", enteredHash);
        console.log("üÜö –û–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à:", storedHash);

        if (enteredHash !== storedHash) {
            return res.status(400).json({ status: "fail", message: "Incorrect current password" });
        }

        if (newPassword !== confirm) {
            return res.status(400).json({ status: "fail", message: "New passwords do not match" });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–æ–ª—å –∏ —Ö–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        const newSalt = sha256(sha1(Date.now().toString() + userId));
        const newHashedPassword = sha256(sha1(newPassword + newSalt));

        userSecret.password = `${newHashedPassword}:${newSalt}`;

        await userSecret.save();

        console.log("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");

        res.status(200).json({ status: "success", message: "Password updated successfully" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:", error);
        res.status(500).json({ status: "fail", message: "Server error" });
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
export {
    createAdmin,
    createUser,
    login,
    logout,
    me,
    getUserByUsername,
    getUserById,
    updateUserProfile,
    updateUserPassword,
    getAllUsers,
    getSalt
};